{"ast":null,"code":"import _slicedToArray from \"/home/rahulvig/Desktop/React Udemy/Contact-Keeper-MERN-App/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/Contact-Keeper-MERN-App/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACTS, CLEAR_CONTACTS } from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const _useReducer = useReducer(contactReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //Get contacts\n\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get(\"/api/contacts\");\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; //Add contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        \"Contact-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/contacts\", contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; //Delete contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; //Set current contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; //Clear current contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //Update contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; //Filter contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; //Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/Contact-Keeper-MERN-App/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","msg","addContact","contact","config","headers","post","deleteContact","id","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n  GET_CONTACTS,\n  CLEAR_CONTACTS\n} from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  //Get contacts\n  const getContacts = async () => {\n    try {\n      const res = await axios.get(\"/api/contacts\");\n      dispatch({ type: GET_CONTACTS, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n\n  //Add contact\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        \"Contact-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/contacts\", contact, config);\n      dispatch({ type: ADD_CONTACT, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n\n  //Delete contact\n  const deleteContact = id => {\n    dispatch({ type: DELETE_CONTACT, payload: id });\n  };\n\n  //Set current contact\n  const setCurrent = contact => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  };\n\n  //Clear current contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  //Update contact\n  const updateContact = contact => {\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\n  };\n\n  //Filter contacts\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  };\n\n  //Clear filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addContact,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}